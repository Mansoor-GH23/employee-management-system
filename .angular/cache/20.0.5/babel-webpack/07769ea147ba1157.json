{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    storeToken(token) {\n      throw new Error('Method not implemented.');\n    }\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7164/api/Auth';\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      });\n    }\n    saveToken(token) {\n      localStorage.setItem('jwtToken', token);\n    }\n    getToken() {\n      return localStorage.getItem('jwtToken');\n    }\n    logout() {\n      localStorage.removeItem('jwtToken');\n      window.location.href = '/login';\n    }\n    getUserRole() {\n      const token = this.getToken();\n      if (!token) return null;\n      try {\n        const payload = jwtDecode(token);\n        if (Array.isArray(payload.role)) {\n          return payload.role[0];\n        }\n        return payload.role || null;\n      } catch {\n        return null;\n      }\n    }\n    isAdmin() {\n      return this.getUserRole() === 'Admin';\n    }\n    isEmployee() {\n      return this.getUserRole() === 'Employee';\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      if (!token) return false;\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n        if (!exp) return false;\n        const now = Math.floor(Date.now() / 1000);\n        return exp > now;\n      } catch {\n        return false;\n      }\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["jwtDecode","AuthService","storeToken","token","Error","constructor","http","apiUrl","login","username","password","post","saveToken","localStorage","setItem","getToken","getItem","logout","removeItem","window","location","href","getUserRole","payload","Array","isArray","role","isAdmin","isEmployee","isAuthenticated","exp","now","Math","floor","Date","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\VS Cummunity Projects\\employee-management-monorepo\\employee-management-system\\frontend\\src\\app\\core\\services\\auth.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface JwtPayload {\n  unique_name?: string;\n  role?: string | string[];\n  exp?: number;\n  [key: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  storeToken(token: string) {\n    throw new Error('Method not implemented.');\n  }\n  private readonly apiUrl = 'https://localhost:7164/api/Auth';\n\n  constructor(private http: HttpClient) {}\n\n  login(username: string, password: string): Observable<{ token: string }> {\n    return this.http.post<{ token: string }>(\n      `${this.apiUrl}/login`,\n      { username, password }\n    );\n  }\n\n  saveToken(token: string) {\n    localStorage.setItem('jwtToken', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('jwtToken');\n  }\n\n  logout() {\n    localStorage.removeItem('jwtToken');\n    window.location.href = '/login';\n  }\n\n  getUserRole(): string | null {\n    const token = this.getToken();\n    if (!token) return null;\n\n    try {\n      const payload: JwtPayload = jwtDecode(token);\n      if (Array.isArray(payload.role)) {\n        return payload.role[0];\n      }\n      return payload.role || null;\n    } catch {\n      return null;\n    }\n  }\n\n  isAdmin(): boolean {\n    return this.getUserRole() === 'Admin';\n  }\n\n  isEmployee(): boolean {\n    return this.getUserRole() === 'Employee';\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      const { exp } = jwtDecode<JwtPayload>(token);\n      if (!exp) return false;\n\n      const now = Math.floor(Date.now() / 1000);\n      return exp > now;\n    } catch {\n      return false;\n    }\n  }\n  //Update Token Expiry Logic here\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,YAAY;;;AAYtC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IACtBC,UAAUA,CAACC,KAAa;MACtB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAGAC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAFP,KAAAC,MAAM,GAAG,iCAAiC;IAEpB;IAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;MACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CACnB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EACtB;QAAEE,QAAQ;QAAEC;MAAQ,CAAE,CACvB;IACH;IAEAE,SAASA,CAACT,KAAa;MACrBU,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEX,KAAK,CAAC;IACzC;IAEAY,QAAQA,CAAA;MACN,OAAOF,YAAY,CAACG,OAAO,CAAC,UAAU,CAAC;IACzC;IAEAC,MAAMA,CAAA;MACJJ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;MACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;IAEAC,WAAWA,CAAA;MACT,MAAMnB,KAAK,GAAG,IAAI,CAACY,QAAQ,EAAE;MAC7B,IAAI,CAACZ,KAAK,EAAE,OAAO,IAAI;MAEvB,IAAI;QACF,MAAMoB,OAAO,GAAevB,SAAS,CAACG,KAAK,CAAC;QAC5C,IAAIqB,KAAK,CAACC,OAAO,CAACF,OAAO,CAACG,IAAI,CAAC,EAAE;UAC/B,OAAOH,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC;QACxB;QACA,OAAOH,OAAO,CAACG,IAAI,IAAI,IAAI;MAC7B,CAAC,CAAC,MAAM;QACN,OAAO,IAAI;MACb;IACF;IAEAC,OAAOA,CAAA;MACL,OAAO,IAAI,CAACL,WAAW,EAAE,KAAK,OAAO;IACvC;IAEAM,UAAUA,CAAA;MACR,OAAO,IAAI,CAACN,WAAW,EAAE,KAAK,UAAU;IAC1C;IAEAO,eAAeA,CAAA;MACb,MAAM1B,KAAK,GAAG,IAAI,CAACY,QAAQ,EAAE;MAC7B,IAAI,CAACZ,KAAK,EAAE,OAAO,KAAK;MAExB,IAAI;QACF,MAAM;UAAE2B;QAAG,CAAE,GAAG9B,SAAS,CAAaG,KAAK,CAAC;QAC5C,IAAI,CAAC2B,GAAG,EAAE,OAAO,KAAK;QAEtB,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,OAAOD,GAAG,GAAGC,GAAG;MAClB,CAAC,CAAC,MAAM;QACN,OAAO,KAAK;MACd;IACF;IAAC,QAAAI,CAAA,G;uCAhEUlC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAXvC,WAAW;MAAAwC,OAAA,EAAXxC,WAAW,CAAAyC,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEP1C,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}