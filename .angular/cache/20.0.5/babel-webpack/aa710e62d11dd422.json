{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    storeToken(token) {\n      throw new Error('Method not implemented.');\n    }\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7164/api/Auth';\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      });\n    }\n    saveToken(token) {\n      localStorage.setItem('jwtToken', token);\n    }\n    getToken() {\n      return localStorage.getItem('jwtToken');\n    }\n    logout() {\n      localStorage.removeItem('jwtToken');\n      window.location.href = '/login';\n    }\n    getUserRole() {\n      const token = this.getToken();\n      if (!token) return null;\n      try {\n        const payload = jwtDecode(token);\n        if (Array.isArray(payload.role)) {\n          return payload.role[0];\n        }\n        return payload.role || null;\n      } catch {\n        return null;\n      }\n    }\n    isAdmin() {\n      return this.getUserRole() === 'Admin';\n    }\n    isEmployee() {\n      return this.getUserRole() === 'Employee';\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      if (!token) return false;\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n        if (!exp) return false;\n        const now = Math.floor(Date.now() / 1000);\n        return exp > now;\n      } catch {\n        return false;\n      }\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}